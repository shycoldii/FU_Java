 Итератор – это специальный внутренний объект в коллекции,
 который с одной стороны имеет доступ ко всем ее private данным и знает ее внутреннюю структуру,
 с другой – реализует общедоступный интерфейс Iterator, благодаря чему все знают, как с ним работать


 Метод next() возвращает следующий (очередной) элемент коллекции.
 Метод hasNext() используется, чтобы проверять, есть ли еще элементы.
 Ну, а remove() – удаляет текущий элемент.

 Кроме итератора есть еще интерфейс Iterable –
 его должны реализовывать все коллекции, которые поддерживают итератор. У него есть единственный метод:
Iterator<T>iterator() -	Возвращает объект-итератор

Пример:
TreeSet<String> set = new TreeSet<String>();
Iterator<String> iterator = set.iterator();

while (iterator.hasNext())
{
 String item = iterator.next();
 System.out.println(item);
}
 for-each - цикл по итератору
 ЛУЧШИЙ ВАРИАНТ
 TreeSet<String> set = new TreeSet<String>();
 for(String item : set)
 {
  System.out.println(item);
 }

паттерн — это шаблон проектирования,
некое поведение, которого должен придерживаться класс или множество взаимосвязанных классов.
Итератор в java может быть реализован для любого объекта,
внутренняя структура которого подразумевает перебор, при этом можно изменить сигнатуру обсуждаемых методов.
Главное при реализации паттерна – логика, которой должен придерживаться класс.

Расширяя интерфейс Iterator, ты реализуешь паттерн, но для реализации паттерна
не обязательно расширять интерфейс.
 Простая аналогия: все рыбы плавают, но не всё, что плавает – рыбы.
Дженерики (обобщения) — это особые средства языка Java для реализации обобщённого программирования:
 особого подхода к описанию данных и алгоритмов, позволяющего работать с различными типами данных
 без изменения их описания.
(angle brackets) обрамляют дженерики
После компиляции какая-либо информация о дженериках стирается. Это называется "Стирание типов"
Стирание типов и дженерики сделаны так, чтобы обеспечить обратную совместимость со старыми версиями JDK,
но при этом дать возможность помогать компилятору с определением типа в новых версиях Java.

Говоря о дженериках мы всегда имеем две категории:
 типизированные типы (Generic Types) и "сырые" типы (Raw Types).
Сырые типы — это типы без указания "уточненения" в фигурных скобках (angle brackets):
List<String> list = new ArrayList<>(); - diamond, потому что компилятор, видя справа <> смотрит на левую часть, где расположено объявление типа переменной, в которую присваивается значение.
И по этой части понимает, каким типом типизируется значение справа.

правило #1: всегда использовать diamond синтаксис, если мы используем типизированные типы.
В противном случае мы рискуем пропустить, где у нас используется raw type.

Чтобы избежать предупреждений в логе о том, что "uses unchecked or unsafe operations"
 можно над используемым методом или классом указать особую аннотацию: @SuppressWarnings("unchecked")

Если мы используем класс, дженерик указывается после имени класса.
public static class SomeType<T> {
	public <E> void test(Collection<E> collection) {
		for (E element : collection) {
			System.out.println(element);
		}
	}
	public void test(List<Integer> collection) {
		for (Integer element : collection) {
			System.out.println(element);
		}
	}
}
правило #2: Если класс типизирован, всегда указывать тип в дженерике.
List<String> не является наследником List<Object>, хотя String является наследником Object.
Стрингбилдер быстрее, но не защищен
Стринг булдер защищен

Интерфейс - это, грубо говоря, дополнение к наследованию для обязательного выполнения
Он создается, а потом классы будут внедрять его в себя. Все событийные модели реализуются через
интерфейс.

Статистический метод можно тоже использовать в интерфейсе как и в классе.

1) String- Этот класс представляет собой последовательность символов.
 Все определенные в программ строковые литералы, вроде "This is String" — это экземпляры класса String.

У String есть две фундаментальные особенности:
это immutable (неизменный) класс
это final класс

2)Чтобы справиться с созданием временного мусора из-за модификаций объекта String,
 можно использовать класс StringBuffer. Это mutable класс, т.е. изменяемый.
 Объект класса StringBuffer может содержать в себе определенный набор символов,
  длину и значение которого можно изменить через вызов определенных методов.

Для создания нового объекта используется один из его конструкторов, например:
StringBuffer() — создаст пустой (не содержащий символов) объект
StringBuffer(String str) — создаст объект на основе переменной str
 (содержащий все символы str в той же последовательности)

 Вообще метод append в классе StringBuffer
 перегружен таким образом, что может принимать в себя практически любой тип данных:
public static void main(String[] args) {
    StringBuffer sb = new StringBuffer();

    sb.append(new Integer(2));
    sb.append("; ");
    sb.append(false);
    sb.append("; ");
    sb.append(Arrays.asList(1,2,3));
    sb.append("; ");

    System.out.println(sb); // 2; false; [1, 2, 3];
}
StringBuffer — потокобезопасный класс.
 Его методы синхронизированы, а экземпляры могут быть использованы несколькими потоками одновременно.
Синхронизированные методы работают медленнее не сихнронизированных.

StringBuilder предоставляет API, аналогичный API StringBuffer’a.



